// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace PMS.Data.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BasicMedicines",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BasicMedicines", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Activities",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FirstMadeRequest = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastMadeRequest = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Activities", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false),
                    ImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkedHours = table.Column<int>(type: "int", nullable: false),
                    PharmacyId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Depots",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ManagerId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    Address_Number = table.Column<int>(type: "int", nullable: true),
                    Address_Street = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address_City = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address_Country = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UpdatedOn = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Depots", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Depots_AspNetUsers_ManagerId",
                        column: x => x.ManagerId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "RefreshTokens",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Token = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RefreshTokens", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RefreshTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Pharmacies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Address_Number = table.Column<int>(type: "int", nullable: true),
                    Address_Street = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address_City = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address_Country = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FounderId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DepotId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UpdatedOn = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pharmacies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Pharmacies_AspNetUsers_FounderId",
                        column: x => x.FounderId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Pharmacies_Depots_DepotId",
                        column: x => x.DepotId,
                        principalTable: "Depots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "Medicines",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Price = table.Column<decimal>(type: "decimal(6,2)", precision: 6, scale: 2, nullable: false),
                    ExpirationDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BasicMedicineId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    IsExpired = table.Column<bool>(type: "bit", nullable: false),
                    DepotId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    PharmacyId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UpdatedOn = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Medicines", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Medicines_BasicMedicines_BasicMedicineId",
                        column: x => x.BasicMedicineId,
                        principalTable: "BasicMedicines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Medicines_Depots_DepotId",
                        column: x => x.DepotId,
                        principalTable: "Depots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Medicines_Pharmacies_PharmacyId",
                        column: x => x.PharmacyId,
                        principalTable: "Pharmacies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SentOn = table.Column<DateOnly>(type: "date", nullable: false),
                    IsAssignRequest = table.Column<bool>(type: "bit", nullable: false),
                    IsWarning = table.Column<bool>(type: "bit", nullable: false),
                    DepotId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    PharmacyId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notifications_Depots_DepotId",
                        column: x => x.DepotId,
                        principalTable: "Depots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Notifications_Pharmacies_PharmacyId",
                        column: x => x.PharmacyId,
                        principalTable: "Pharmacies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "BasicMedicines",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[,]
                {
                    { "19325580-70c7-4362-a0cd-44182770d200", "Farxiga (дапаглифлозин) е перорално лекарство, което може да се дава на определени хора с диабет, сърдечни заболявания или бъбречни заболявания, за да се подобрят техните резултати.", "Фарксига" },
                    { "26479a38-fa57-4a27-994b-f0b3b29c1249", "Доксициклинът е тетрациклинов антибиотик, който инхибира бактериалния растеж и се смята, че има противовъзпалителни ефекти. Доксициклин се използва за лечение на много различни бактериални инфекции, включително акне, инфекции на пикочните и дихателните пътища, инфекции на очите, заболявания на венците, гонорея, хламидия и сифилис. Може да се използва и за предотвратяване на малария и за лечение на инфекции, причинени от акари, кърлежи или въшки.", "Доксициклин" },
                    { "520d114a-5dc4-4c98-bf14-7098305c94c3", "Dupixent е инжекционно лекарство с рецепта, използвано за лечение на редица възпалителни състояния.", "Дупиксент" },
                    { "5cc29d8f-639f-4ef2-8636-ab39da9f0e16", "Цефалексин е цефалоспоринов (SEF ниско място в) антибиотик. Действа като се бори с бактериите в тялото ви.", "Цефалексин" },
                    { "5dbdfed3-01f9-4c91-968c-c32e3db1f553", "Бензонататът е ненаркотично лекарство за кашлица.", "Бензонатат" },
                    { "7af8d779-72d1-432d-a0c5-054f2278e877", "Азитромицинът е антибиотик, който се бори с бактериите. Капсулите Азитромицин АБР се приемат цели, веднъж дневно. Както редица други антибиотици продуктът трябва да се приема най-малко един час преди или два часа след прием на храна.", "Азитромицин" },
                    { "8d05a4bb-fe3e-4f47-bc3b-676f6b6d8e16", "Бупренорфинът е опиоидно лекарство, използвано за лечение на разстройство при употреба на опиати (OUD), остра болка и хронична болка.", "Бупренорфин" },
                    { "9201e0cd-e454-4b81-a91e-7b34ec52a341", "Амитриптилин е трицикличен антидепресант със седативен ефект. Амитриптилин засяга определени химични посланици (невротрансмитери), които комуникират между мозъчните клетки и помагат за регулиране на настроението.", "Амитриптилин" },
                    { "939f1f41-1d91-478e-b1b2-ec461d8a543a", "Клиндамицин е антибиотик, който се бори с бактериите в тялото.", "Клиндамицин" },
                    { "96582e57-4948-4386-a97a-c8e3eae32903", "Ативан (лоразепам) принадлежи към клас лекарства, наречени бензодиазепини. Смята се, че бензодиазепините действат чрез засилване на активността на определени невротрансмитери в мозъка.", "Ативан" },
                    { "96bc926e-2c41-4ac6-888d-6da643291756", "Циталопрам е лекарство, отпускано с рецепта, използвано при възрастни за лечение на депресия.", "Циталопрам" },
                    { "9fd753cd-d9dc-4688-b7e3-7359a0a17a71", "Цефалексин е цефалоспо Ципрофлоксацин е флуорохинолонов (flor-o-KWIN-o-lone) антибиотик, използва се за лечение на различни видове бактериални инфекции. Използва се и за лечение на хора, които са били изложени на антракс или определени видове чума. Ципрофлоксацин с удължено освобождаване е одобрен само за употреба при възрастни.rin (SEF антибиотик с ниско съдържание на спор). Действа като се бори с бактериите в тялото ви.", "Ципрофлоксацин" },
                    { "a450bff9-411c-4abe-89de-39ed9d849eb7", "Entresto съдържа комбинация от сакубитрил и валсартан. Сакубитрил е лекарство за кръвно налягане. Той действа, като повишава нивата на определени протеини в тялото, които могат да разширят (разширят) кръвоносните съдове. Това помага за понижаване на кръвното налягане чрез намаляване на нивата на натрий.", "Ентресто" },
                    { "ab3b1230-2ec3-497a-9e36-1bf9768ac33b", "Adderall се използва за лечение на хиперактивно разстройство с дефицит на вниманието (ADHD) и нарколепсия. Adderall съдържа комбинация от амфетамин и декстроамфетамин. Амфетаминът и декстроамфетаминът са стимуланти на централната нервна система, които засягат химикалите в мозъка и нервите, които допринасят за хиперактивност и контрол на импулсите.", "Адерал" },
                    { "c4b4140d-d2eb-4c91-8b49-d5e84c38b0a2", "Амлодипин безилат принадлежи към клас лекарства, наречени блокери на калциевите канали. Понижава кръвното налягане, като отпуска кръвоносните съдове, така че сърцето не трябва да изпомпва толкова силно.", "Амлодипин" },
                    { "c572ce90-f21b-4e39-8134-217d37710096", "Brilinta предотвратява слепването на тромбоцитите в кръвта и образуването на нежелан кръвен съсирек, който може да блокира артерия.", "Брилинта" },
                    { "d04dbe2e-e0b1-41ec-95fd-b4e737c9f6f0", "Entyvio се използва за лечение на улцерозен колит (UC) или болест на Crohn, която е умерена до тежка при възрастни.", "Entyvio" },
                    { "d936ff74-300f-4dfc-8059-ee8fe0259b8e", "Циклобензапринът е мускулен релаксант. Действа, като блокира нервните импулси (или усещанията за болка), които се изпращат до мозъка ви. Циклобензаприн се използва заедно с почивка и физиотерапия за лечение на състояния на скелетните мускули като болка или нараняване.", "Циклобензаприн" },
                    { "dcd7695f-4c04-45af-8a4f-3afd596c0252", "Аторвастатин принадлежи към клас лекарства, наречени HMG-CoA редуктазни инхибитори (статини). Той действа, като забавя производството на холестерол в тялото, за да намали количеството холестерол, което може да се натрупа по стените на артериите и да блокира притока на кръв към сърцето, мозъка и други части на тялото.", "Аторвастатин" },
                    { "e838e065-bcd0-4d3f-ade5-5b21144348e2", "Cymbalta е селективен антидепресант, инхибитор на обратното захващане на серотонин и норепинефрин (SSNRI). Дулоксетин засяга химикалите в мозъка, които може да са небалансирани при хора с депресия.", "Цимбалта" },
                    { "ec93ea37-c0b2-448f-90c9-311c1da3d588", "Букалните филми Bunavail съдържат комбинация от бупренорфин и налоксон. Бупренорфинът е опиоидно лекарство, понякога наричано наркотик. Налоксонът блокира ефектите на опиоидните лекарства, включително облекчаване на болката или усещане за благополучие, което може да доведе до злоупотреба с опиати.", "Bunavail" },
                    { "effec474-6782-4f14-afdf-bb33dc055de3", "Клоназепам е бензодиазепин (ben-zoe-dye-AZE-eh-peen). Смята се, че бензодиазепините действат чрез засилване на активността на определени невротрансмитери в мозъка.", "Клоназепам" },
                    { "fb072c33-6e60-4601-add0-b2b20807ab9a", "Фентанил е синтетичен опиоиден медикамент, използван за лечение на умерена до силна болка, той е до 100 пъти по-силен от други опиоиди като морфин, хероин или оксикодон. Фентанил е от класа лекарства, наречени наркотични аналгетици.", "Фентанил" },
                    { "fd2d444b-066d-459c-bfcb-07abcaa843e6", "Ацетаминофенът се използва за лечение на лека до умерена болка, умерена до силна болка във връзка с опиати или за намаляване на температурата. Често лекуваните състояния включват главоболие, мускулни болки, артрит, болки в гърба, зъбобол, възпалено гърло, настинки, грип и треска.", "Ацетаминофен" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Activities_UserId",
                table: "Activities",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUsers_PharmacyId",
                table: "AspNetUsers",
                column: "PharmacyId");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Depots_ManagerId",
                table: "Depots",
                column: "ManagerId");

            migrationBuilder.CreateIndex(
                name: "IX_Medicines_BasicMedicineId",
                table: "Medicines",
                column: "BasicMedicineId");

            migrationBuilder.CreateIndex(
                name: "IX_Medicines_DepotId",
                table: "Medicines",
                column: "DepotId");

            migrationBuilder.CreateIndex(
                name: "IX_Medicines_PharmacyId",
                table: "Medicines",
                column: "PharmacyId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_DepotId",
                table: "Notifications",
                column: "DepotId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_PharmacyId",
                table: "Notifications",
                column: "PharmacyId");

            migrationBuilder.CreateIndex(
                name: "IX_Pharmacies_DepotId",
                table: "Pharmacies",
                column: "DepotId");

            migrationBuilder.CreateIndex(
                name: "IX_Pharmacies_FounderId",
                table: "Pharmacies",
                column: "FounderId");

            migrationBuilder.CreateIndex(
                name: "IX_RefreshTokens_UserId",
                table: "RefreshTokens",
                column: "UserId",
                unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_Activities_AspNetUsers_UserId",
                table: "Activities",
                column: "UserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                table: "AspNetUserClaims",
                column: "UserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                table: "AspNetUserLogins",
                column: "UserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                table: "AspNetUserRoles",
                column: "UserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_AspNetUsers_Pharmacies_PharmacyId",
                table: "AspNetUsers",
                column: "PharmacyId",
                principalTable: "Pharmacies",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Depots_AspNetUsers_ManagerId",
                table: "Depots");

            migrationBuilder.DropForeignKey(
                name: "FK_Pharmacies_AspNetUsers_FounderId",
                table: "Pharmacies");

            migrationBuilder.DropTable(
                name: "Activities");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Medicines");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "RefreshTokens");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "BasicMedicines");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Pharmacies");

            migrationBuilder.DropTable(
                name: "Depots");
        }
    }
}
