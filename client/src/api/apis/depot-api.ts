/* tslint:disable */
/* eslint-disable */
/**
 * PMS.Api
 * Pharmacy Management System API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DepotIM } from '../models';
import { DepotUM } from '../models';
import { DepotVM } from '../models';
/**
 * DepotApi - axios parameter creator
 * @export
 */
export const DepotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assigns a depot to a pharmacy.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotAssignToPharmacyPost: async (pharmacyId?: string, depotId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/depot/assign-to-pharmacy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pharmacyId !== undefined) {
                localVarQueryParameter['pharmacyId'] = pharmacyId;
            }

            if (depotId !== undefined) {
                localVarQueryParameter['depotId'] = depotId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new depot.
         * @param {DepotIM} [body] The depot input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotCreatePost: async (body?: DepotIM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/depot/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a depot.
         * @param {string} id The ID of the depot to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotDeleteIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDepotDeleteIdDelete.');
            }
            const localVarPath = `/api/depot/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a depot by its ID.
         * @param {string} id The ID of the depot to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotDepotIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDepotDepotIdGet.');
            }
            const localVarPath = `/api/depot/depot/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all depots owned by a specific user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotDepotsByUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/depot/depots-by-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all depots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotDepotsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/depot/depots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing depot.
         * @param {DepotUM} [body] The updated depot model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepotUpdatePut: async (body?: DepotUM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/depot/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepotApi - functional programming interface
 * @export
 */
export const DepotApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assigns a depot to a pharmacy.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotAssignToPharmacyPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotAssignToPharmacyPost(pharmacyId, depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new depot.
         * @param {DepotIM} [body] The depot input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotCreatePost(body?: DepotIM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a depot.
         * @param {string} id The ID of the depot to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotDeleteIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a depot by its ID.
         * @param {string} id The ID of the depot to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DepotVM>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotDepotIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all depots owned by a specific user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotsByUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DepotVM>>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotDepotsByUserGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all depots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DepotVM>>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotDepotsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates an existing depot.
         * @param {DepotUM} [body] The updated depot model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotUpdatePut(body?: DepotUM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DepotApiAxiosParamCreator(configuration).apiDepotUpdatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DepotApi - factory interface
 * @export
 */
export const DepotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Assigns a depot to a pharmacy.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotAssignToPharmacyPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DepotApiFp(configuration).apiDepotAssignToPharmacyPost(pharmacyId, depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new depot.
         * @param {DepotIM} [body] The depot input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotCreatePost(body?: DepotIM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DepotApiFp(configuration).apiDepotCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a depot.
         * @param {string} id The ID of the depot to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DepotApiFp(configuration).apiDepotDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a depot by its ID.
         * @param {string} id The ID of the depot to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DepotVM>> {
            return DepotApiFp(configuration).apiDepotDepotIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all depots owned by a specific user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotsByUserGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DepotVM>>> {
            return DepotApiFp(configuration).apiDepotDepotsByUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all depots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotDepotsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DepotVM>>> {
            return DepotApiFp(configuration).apiDepotDepotsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing depot.
         * @param {DepotUM} [body] The updated depot model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepotUpdatePut(body?: DepotUM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DepotApiFp(configuration).apiDepotUpdatePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepotApi - object-oriented interface
 * @export
 * @class DepotApi
 * @extends {BaseAPI}
 */
export class DepotApi extends BaseAPI {
    /**
     * 
     * @summary Assigns a depot to a pharmacy.
     * @param {string} [pharmacyId] The ID of the pharmacy.
     * @param {string} [depotId] The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotAssignToPharmacyPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DepotApiFp(this.configuration).apiDepotAssignToPharmacyPost(pharmacyId, depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a new depot.
     * @param {DepotIM} [body] The depot input model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotCreatePost(body?: DepotIM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DepotApiFp(this.configuration).apiDepotCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a depot.
     * @param {string} id The ID of the depot to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotDeleteIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DepotApiFp(this.configuration).apiDepotDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a depot by its ID.
     * @param {string} id The ID of the depot to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotDepotIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DepotVM>> {
        return DepotApiFp(this.configuration).apiDepotDepotIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all depots owned by a specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotDepotsByUserGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DepotVM>>> {
        return DepotApiFp(this.configuration).apiDepotDepotsByUserGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all depots.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotDepotsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DepotVM>>> {
        return DepotApiFp(this.configuration).apiDepotDepotsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Updates an existing depot.
     * @param {DepotUM} [body] The updated depot model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepotApi
     */
    public async apiDepotUpdatePut(body?: DepotUM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DepotApiFp(this.configuration).apiDepotUpdatePut(body, options).then((request) => request(this.axios, this.basePath));
    }
}
