/* tslint:disable */
/* eslint-disable */
/**
 * PMS.Api
 * Pharmacy Management System API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BasicMedicineRequest } from '../models';
import { BasicMedicineVM } from '../models';
import { BuildingType } from '../models';
import { MedicineIM } from '../models';
import { MedicineVM } from '../models';
import { RefillIM } from '../models';
/**
 * MedicineApi - axios parameter creator
 * @export
 */
export const MedicineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all basic medicines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineBasicMedicinesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/medicine/basic-medicines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new medicine.
         * @param {MedicineIM} [body] The medicine input model.
         * @param {string} [buildingId] The id of the building.
         * @param {BuildingType} [buildingType] The type of the building..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineCreatePost: async (body?: MedicineIM, buildingId?: string, buildingType?: BuildingType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/medicine/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (buildingId !== undefined) {
                localVarQueryParameter['buildingId'] = buildingId;
            }

            if (buildingType !== undefined) {
                localVarQueryParameter['buildingType'] = buildingType;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a medicine.
         * @param {string} id The ID of the medicine to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineDeleteIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMedicineDeleteIdDelete.');
            }
            const localVarPath = `/api/medicine/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a medicine by its ID.
         * @param {string} id The ID of the medicine to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineMedicineIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMedicineMedicineIdGet.');
            }
            const localVarPath = `/api/medicine/medicine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all medicines.
         * @param {string} buildingId The ID of the pharmacy from which we need the medicines.
         * @param {BuildingType} [type] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineMedicinesBuildingIdGet: async (buildingId: string, type?: BuildingType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            if (buildingId === null || buildingId === undefined) {
                throw new RequiredError('buildingId','Required parameter buildingId was null or undefined when calling apiMedicineMedicinesBuildingIdGet.');
            }
            const localVarPath = `/api/medicine/medicines/{buildingId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refills a medicine with given id.
         * @param {string} id The ID of the medicine.
         * @param {RefillIM} [body] The refill input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineRefillIdPost: async (id: string, body?: RefillIM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMedicineRefillIdPost.');
            }
            const localVarPath = `/api/medicine/refill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Requests a new basic medicine.
         * @param {BasicMedicineRequest} [body] The basic medicine request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineRequestBasicMedicinePost: async (body?: BasicMedicineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/medicine/request-basic-medicine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing medicine.
         * @param {string} [id] 
         * @param {number} [price] 
         * @param {number} [count] 
         * @param {Blob} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMedicineUpdatePutForm: async (id?: string, price?: number, count?: number, image?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/medicine/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }

            if (price !== undefined) { 
                localVarFormParams.append('Price', price as any);
            }

            if (count !== undefined) { 
                localVarFormParams.append('Count', count as any);
            }

            if (image !== undefined) { 
                localVarFormParams.append('Image', image as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicineApi - functional programming interface
 * @export
 */
export const MedicineApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all basic medicines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineBasicMedicinesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<BasicMedicineVM>>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineBasicMedicinesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new medicine.
         * @param {MedicineIM} [body] The medicine input model.
         * @param {string} [buildingId] The id of the building.
         * @param {BuildingType} [buildingType] The type of the building..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineCreatePost(body?: MedicineIM, buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineCreatePost(body, buildingId, buildingType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a medicine.
         * @param {string} id The ID of the medicine to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineDeleteIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a medicine by its ID.
         * @param {string} id The ID of the medicine to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineMedicineIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MedicineVM>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineMedicineIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all medicines.
         * @param {string} buildingId The ID of the pharmacy from which we need the medicines.
         * @param {BuildingType} [type] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineMedicinesBuildingIdGet(buildingId: string, type?: BuildingType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MedicineVM>>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineMedicinesBuildingIdGet(buildingId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Refills a medicine with given id.
         * @param {string} id The ID of the medicine.
         * @param {RefillIM} [body] The refill input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineRefillIdPost(id: string, body?: RefillIM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineRefillIdPost(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Requests a new basic medicine.
         * @param {BasicMedicineRequest} [body] The basic medicine request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineRequestBasicMedicinePost(body?: BasicMedicineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineRequestBasicMedicinePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates an existing medicine.
         * @param {string} [id] 
         * @param {number} [price] 
         * @param {number} [count] 
         * @param {Blob} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineUpdatePutForm(id?: string, price?: number, count?: number, image?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicineApiAxiosParamCreator(configuration).apiMedicineUpdatePutForm(id, price, count, image, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MedicineApi - factory interface
 * @export
 */
export const MedicineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves all basic medicines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineBasicMedicinesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BasicMedicineVM>>> {
            return MedicineApiFp(configuration).apiMedicineBasicMedicinesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new medicine.
         * @param {MedicineIM} [body] The medicine input model.
         * @param {string} [buildingId] The id of the building.
         * @param {BuildingType} [buildingType] The type of the building..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineCreatePost(body?: MedicineIM, buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicineApiFp(configuration).apiMedicineCreatePost(body, buildingId, buildingType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a medicine.
         * @param {string} id The ID of the medicine to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicineApiFp(configuration).apiMedicineDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a medicine by its ID.
         * @param {string} id The ID of the medicine to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineMedicineIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MedicineVM>> {
            return MedicineApiFp(configuration).apiMedicineMedicineIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all medicines.
         * @param {string} buildingId The ID of the pharmacy from which we need the medicines.
         * @param {BuildingType} [type] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineMedicinesBuildingIdGet(buildingId: string, type?: BuildingType, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MedicineVM>>> {
            return MedicineApiFp(configuration).apiMedicineMedicinesBuildingIdGet(buildingId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refills a medicine with given id.
         * @param {string} id The ID of the medicine.
         * @param {RefillIM} [body] The refill input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineRefillIdPost(id: string, body?: RefillIM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicineApiFp(configuration).apiMedicineRefillIdPost(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Requests a new basic medicine.
         * @param {BasicMedicineRequest} [body] The basic medicine request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineRequestBasicMedicinePost(body?: BasicMedicineRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicineApiFp(configuration).apiMedicineRequestBasicMedicinePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing medicine.
         * @param {string} [id] 
         * @param {number} [price] 
         * @param {number} [count] 
         * @param {Blob} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMedicineUpdatePutForm(id?: string, price?: number, count?: number, image?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicineApiFp(configuration).apiMedicineUpdatePutForm(id, price, count, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicineApi - object-oriented interface
 * @export
 * @class MedicineApi
 * @extends {BaseAPI}
 */
export class MedicineApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all basic medicines.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineBasicMedicinesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<BasicMedicineVM>>> {
        return MedicineApiFp(this.configuration).apiMedicineBasicMedicinesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a new medicine.
     * @param {MedicineIM} [body] The medicine input model.
     * @param {string} [buildingId] The id of the building.
     * @param {BuildingType} [buildingType] The type of the building..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineCreatePost(body?: MedicineIM, buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicineApiFp(this.configuration).apiMedicineCreatePost(body, buildingId, buildingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a medicine.
     * @param {string} id The ID of the medicine to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineDeleteIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicineApiFp(this.configuration).apiMedicineDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a medicine by its ID.
     * @param {string} id The ID of the medicine to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineMedicineIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MedicineVM>> {
        return MedicineApiFp(this.configuration).apiMedicineMedicineIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all medicines.
     * @param {string} buildingId The ID of the pharmacy from which we need the medicines.
     * @param {BuildingType} [type] The type of the building.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineMedicinesBuildingIdGet(buildingId: string, type?: BuildingType, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MedicineVM>>> {
        return MedicineApiFp(this.configuration).apiMedicineMedicinesBuildingIdGet(buildingId, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Refills a medicine with given id.
     * @param {string} id The ID of the medicine.
     * @param {RefillIM} [body] The refill input model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineRefillIdPost(id: string, body?: RefillIM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicineApiFp(this.configuration).apiMedicineRefillIdPost(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Requests a new basic medicine.
     * @param {BasicMedicineRequest} [body] The basic medicine request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineRequestBasicMedicinePost(body?: BasicMedicineRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicineApiFp(this.configuration).apiMedicineRequestBasicMedicinePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Updates an existing medicine.
     * @param {string} [id] 
     * @param {number} [price] 
     * @param {number} [count] 
     * @param {Blob} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public async apiMedicineUpdatePutForm(id?: string, price?: number, count?: number, image?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicineApiFp(this.configuration).apiMedicineUpdatePutForm(id, price, count, image, options).then((request) => request(this.axios, this.basePath));
    }
}
