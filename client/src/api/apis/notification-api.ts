/* tslint:disable */
/* eslint-disable */
/**
 * PMS.Api
 * Pharmacy Management System API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BuildingType } from '../models';
import { NotificationVM } from '../models';
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all notifications representing assign requests.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationAssignRequestsGet: async (depotId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notification/assign-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (depotId !== undefined) {
                localVarQueryParameter['depotId'] = depotId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all notifications for depot.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationGetDepotsDepotIdGet: async (depotId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depotId' is not null or undefined
            if (depotId === null || depotId === undefined) {
                throw new RequiredError('depotId','Required parameter depotId was null or undefined when calling apiNotificationGetDepotsDepotIdGet.');
            }
            const localVarPath = `/api/notification/get-depots/{depotId}`
                .replace(`{${"depotId"}}`, encodeURIComponent(String(depotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationGetGet: async (pharmacyId?: string, depotId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notification/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pharmacyId !== undefined) {
                localVarQueryParameter['pharmacyId'] = pharmacyId;
            }

            if (depotId !== undefined) {
                localVarQueryParameter['depotId'] = depotId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all notifications for pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationGetPharmaciesPharmacyIdGet: async (pharmacyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pharmacyId' is not null or undefined
            if (pharmacyId === null || pharmacyId === undefined) {
                throw new RequiredError('pharmacyId','Required parameter pharmacyId was null or undefined when calling apiNotificationGetPharmaciesPharmacyIdGet.');
            }
            const localVarPath = `/api/notification/get-pharmacies/{pharmacyId}`
                .replace(`{${"pharmacyId"}}`, encodeURIComponent(String(pharmacyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [buildingId] The ID of the building.
         * @param {BuildingType} [buildingType] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationWarningsGet: async (buildingId?: string, buildingType?: BuildingType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notification/warnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (buildingId !== undefined) {
                localVarQueryParameter['buildingId'] = buildingId;
            }

            if (buildingType !== undefined) {
                localVarQueryParameter['buildingType'] = buildingType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all notifications representing assign requests.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationAssignRequestsGet(depotId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationVM>>>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).apiNotificationAssignRequestsGet(depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all notifications for depot.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetDepotsDepotIdGet(depotId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationVM>>>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).apiNotificationGetDepotsDepotIdGet(depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetGet(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationVM>>>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).apiNotificationGetGet(pharmacyId, depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all notifications for pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationVM>>>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [buildingId] The ID of the building.
         * @param {BuildingType} [buildingType] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationWarningsGet(buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationVM>>>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).apiNotificationWarningsGet(buildingId, buildingType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves all notifications representing assign requests.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationAssignRequestsGet(depotId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationVM>>> {
            return NotificationApiFp(configuration).apiNotificationAssignRequestsGet(depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all notifications for depot.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetDepotsDepotIdGet(depotId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationVM>>> {
            return NotificationApiFp(configuration).apiNotificationGetDepotsDepotIdGet(depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetGet(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationVM>>> {
            return NotificationApiFp(configuration).apiNotificationGetGet(pharmacyId, depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all notifications for pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationVM>>> {
            return NotificationApiFp(configuration).apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all notifications.
         * @param {string} [buildingId] The ID of the building.
         * @param {BuildingType} [buildingType] The type of the building.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationWarningsGet(buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationVM>>> {
            return NotificationApiFp(configuration).apiNotificationWarningsGet(buildingId, buildingType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all notifications representing assign requests.
     * @param {string} [depotId] The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public async apiNotificationAssignRequestsGet(depotId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationVM>>> {
        return NotificationApiFp(this.configuration).apiNotificationAssignRequestsGet(depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all notifications for depot.
     * @param {string} depotId The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public async apiNotificationGetDepotsDepotIdGet(depotId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationVM>>> {
        return NotificationApiFp(this.configuration).apiNotificationGetDepotsDepotIdGet(depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all notifications.
     * @param {string} [pharmacyId] The ID of the pharmacy.
     * @param {string} [depotId] The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public async apiNotificationGetGet(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationVM>>> {
        return NotificationApiFp(this.configuration).apiNotificationGetGet(pharmacyId, depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all notifications for pharmacy.
     * @param {string} pharmacyId The ID of the pharmacy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public async apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationVM>>> {
        return NotificationApiFp(this.configuration).apiNotificationGetPharmaciesPharmacyIdGet(pharmacyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all notifications.
     * @param {string} [buildingId] The ID of the building.
     * @param {BuildingType} [buildingType] The type of the building.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public async apiNotificationWarningsGet(buildingId?: string, buildingType?: BuildingType, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationVM>>> {
        return NotificationApiFp(this.configuration).apiNotificationWarningsGet(buildingId, buildingType, options).then((request) => request(this.axios, this.basePath));
    }
}
