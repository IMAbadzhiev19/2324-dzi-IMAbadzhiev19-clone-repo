/* tslint:disable */
/* eslint-disable */
/**
 * PMS.Api
 * Pharmacy Management System API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AssignEmployeeIM } from '../models';
import { PharmacyIM } from '../models';
import { PharmacyUM } from '../models';
import { PharmacyVM } from '../models';
import { UserVM } from '../models';
/**
 * PharmacyApi - axios parameter creator
 * @export
 */
export const PharmacyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assigns employee to pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {AssignEmployeeIM} [body] The assign employee input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyAssignEmployeePharmacyIdPost: async (pharmacyId: string, body?: AssignEmployeeIM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pharmacyId' is not null or undefined
            if (pharmacyId === null || pharmacyId === undefined) {
                throw new RequiredError('pharmacyId','Required parameter pharmacyId was null or undefined when calling apiPharmacyAssignEmployeePharmacyIdPost.');
            }
            const localVarPath = `/api/pharmacy/assign-employee/{pharmacyId}`
                .replace(`{${"pharmacyId"}}`, encodeURIComponent(String(pharmacyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new pharmacy.
         * @param {PharmacyIM} [body] The input model for creating a pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyCreatePost: async (body?: PharmacyIM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pharmacy/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyDeleteIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPharmacyDeleteIdDelete.');
            }
            const localVarPath = `/api/pharmacy/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacies by depot ID.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyPharmaciesDepotIdGet: async (depotId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depotId' is not null or undefined
            if (depotId === null || depotId === undefined) {
                throw new RequiredError('depotId','Required parameter depotId was null or undefined when calling apiPharmacyPharmaciesDepotIdGet.');
            }
            const localVarPath = `/api/pharmacy/pharmacies/{depotId}`
                .replace(`{${"depotId"}}`, encodeURIComponent(String(depotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacies owned by user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyPharmaciesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pharmacy/pharmacies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacists working in the pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyPharmacistsPharmacyIdGet: async (pharmacyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pharmacyId' is not null or undefined
            if (pharmacyId === null || pharmacyId === undefined) {
                throw new RequiredError('pharmacyId','Required parameter pharmacyId was null or undefined when calling apiPharmacyPharmacistsPharmacyIdGet.');
            }
            const localVarPath = `/api/pharmacy/pharmacists/{pharmacyId}`
                .replace(`{${"pharmacyId"}}`, encodeURIComponent(String(pharmacyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyPharmacyIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPharmacyPharmacyIdGet.');
            }
            const localVarPath = `/api/pharmacy/pharmacy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes employee from pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {string} [employeeId] The ID of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyRemoveEmployeePharmacyIdPost: async (pharmacyId: string, employeeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pharmacyId' is not null or undefined
            if (pharmacyId === null || pharmacyId === undefined) {
                throw new RequiredError('pharmacyId','Required parameter pharmacyId was null or undefined when calling apiPharmacyRemoveEmployeePharmacyIdPost.');
            }
            const localVarPath = `/api/pharmacy/remove-employee/{pharmacyId}`
                .replace(`{${"pharmacyId"}}`, encodeURIComponent(String(pharmacyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Requests depot assignment.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyRequestDepotAssignPost: async (pharmacyId?: string, depotId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pharmacy/request-depot-assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pharmacyId !== undefined) {
                localVarQueryParameter['pharmacyId'] = pharmacyId;
            }

            if (depotId !== undefined) {
                localVarQueryParameter['depotId'] = depotId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing pharmacy.
         * @param {PharmacyUM} [body] The update model for the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPharmacyUpdatePut: async (body?: PharmacyUM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pharmacy/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PharmacyApi - functional programming interface
 * @export
 */
export const PharmacyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assigns employee to pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {AssignEmployeeIM} [body] The assign employee input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId: string, body?: AssignEmployeeIM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new pharmacy.
         * @param {PharmacyIM} [body] The input model for creating a pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyCreatePost(body?: PharmacyIM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyDeleteIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacies by depot ID.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmaciesDepotIdGet(depotId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PharmacyVM>>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyPharmaciesDepotIdGet(depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacies owned by user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmaciesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PharmacyVM>>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyPharmaciesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all pharmacists working in the pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmacistsPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserVM>>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyPharmacistsPharmacyIdGet(pharmacyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmacyIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PharmacyVM>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyPharmacyIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes employee from pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {string} [employeeId] The ID of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId: string, employeeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId, employeeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Requests depot assignment.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyRequestDepotAssignPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyRequestDepotAssignPost(pharmacyId, depotId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates an existing pharmacy.
         * @param {PharmacyUM} [body] The update model for the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyUpdatePut(body?: PharmacyUM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PharmacyApiAxiosParamCreator(configuration).apiPharmacyUpdatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PharmacyApi - factory interface
 * @export
 */
export const PharmacyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Assigns employee to pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {AssignEmployeeIM} [body] The assign employee input model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId: string, body?: AssignEmployeeIM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new pharmacy.
         * @param {PharmacyIM} [body] The input model for creating a pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyCreatePost(body?: PharmacyIM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all pharmacies by depot ID.
         * @param {string} depotId The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmaciesDepotIdGet(depotId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PharmacyVM>>> {
            return PharmacyApiFp(configuration).apiPharmacyPharmaciesDepotIdGet(depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all pharmacies owned by user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmaciesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PharmacyVM>>> {
            return PharmacyApiFp(configuration).apiPharmacyPharmaciesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all pharmacists working in the pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmacistsPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserVM>>> {
            return PharmacyApiFp(configuration).apiPharmacyPharmacistsPharmacyIdGet(pharmacyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a pharmacy by its ID.
         * @param {string} id The ID of the pharmacy to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyPharmacyIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PharmacyVM>> {
            return PharmacyApiFp(configuration).apiPharmacyPharmacyIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes employee from pharmacy.
         * @param {string} pharmacyId The ID of the pharmacy.
         * @param {string} [employeeId] The ID of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId: string, employeeId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Requests depot assignment.
         * @param {string} [pharmacyId] The ID of the pharmacy.
         * @param {string} [depotId] The ID of the depot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyRequestDepotAssignPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyRequestDepotAssignPost(pharmacyId, depotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing pharmacy.
         * @param {PharmacyUM} [body] The update model for the pharmacy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPharmacyUpdatePut(body?: PharmacyUM, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PharmacyApiFp(configuration).apiPharmacyUpdatePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PharmacyApi - object-oriented interface
 * @export
 * @class PharmacyApi
 * @extends {BaseAPI}
 */
export class PharmacyApi extends BaseAPI {
    /**
     * 
     * @summary Assigns employee to pharmacy.
     * @param {string} pharmacyId The ID of the pharmacy.
     * @param {AssignEmployeeIM} [body] The assign employee input model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId: string, body?: AssignEmployeeIM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyAssignEmployeePharmacyIdPost(pharmacyId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a new pharmacy.
     * @param {PharmacyIM} [body] The input model for creating a pharmacy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyCreatePost(body?: PharmacyIM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a pharmacy by its ID.
     * @param {string} id The ID of the pharmacy to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyDeleteIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all pharmacies by depot ID.
     * @param {string} depotId The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyPharmaciesDepotIdGet(depotId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PharmacyVM>>> {
        return PharmacyApiFp(this.configuration).apiPharmacyPharmaciesDepotIdGet(depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all pharmacies owned by user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyPharmaciesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PharmacyVM>>> {
        return PharmacyApiFp(this.configuration).apiPharmacyPharmaciesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all pharmacists working in the pharmacy.
     * @param {string} pharmacyId The ID of the pharmacy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyPharmacistsPharmacyIdGet(pharmacyId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserVM>>> {
        return PharmacyApiFp(this.configuration).apiPharmacyPharmacistsPharmacyIdGet(pharmacyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a pharmacy by its ID.
     * @param {string} id The ID of the pharmacy to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyPharmacyIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PharmacyVM>> {
        return PharmacyApiFp(this.configuration).apiPharmacyPharmacyIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Removes employee from pharmacy.
     * @param {string} pharmacyId The ID of the pharmacy.
     * @param {string} [employeeId] The ID of the employee.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId: string, employeeId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyRemoveEmployeePharmacyIdPost(pharmacyId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Requests depot assignment.
     * @param {string} [pharmacyId] The ID of the pharmacy.
     * @param {string} [depotId] The ID of the depot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyRequestDepotAssignPost(pharmacyId?: string, depotId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyRequestDepotAssignPost(pharmacyId, depotId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Updates an existing pharmacy.
     * @param {PharmacyUM} [body] The update model for the pharmacy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyApi
     */
    public async apiPharmacyUpdatePut(body?: PharmacyUM, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PharmacyApiFp(this.configuration).apiPharmacyUpdatePut(body, options).then((request) => request(this.axios, this.basePath));
    }
}
